=====================================================
centos
do

# yum install net-tools
ip address show
ip a s
dhclient Ž-v //configure internet
# yum group list
su -c 'yum update'		get update 
$ sudo yum install docker-ce

-----------------------------

https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-centos-7
sudo yum check-update
curl -fsSL https://get.docker.com/ | sh
sudo systemctl start docker	start the Docker daemon:
sudo systemctl status docker
sudo systemctl enable docker	Lastly, make sure it starts at every server reboot:

sudo service docker status

sudo docker pull hello-world
sudo docker pull centos		73mb
sudo docker run -it centos
exit
clear
docker -v
docker -version
docker run -it ubuntu	
ls
docker images
docker ps
docker run -it --nae james ubuntu
docker rmi hello-world

docker pull redis
docker run --name myrdis -d redis 	d is background process

docker run --rm -it --link myredis:redis redis /bin/bash
redis-cli -h redis -p 6379
ping
set "abc" 123
get "abc"
exit
exit

docker search ubuntu
docker search -s 1000 ubuntu
docker pull ubuntu
docker run Ž-it ubuntu ./bin/bash

docker run -d -p 3000:80 tutum/hello-world bind port 3000 of host to 80 of container, -d detached
-------------------------------------
https://www.linux.com/learn/getting-started-kubernetes-easy-minikube

minikube kubernetes
$ curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.8.0/minikube-linux-amd64	72mb
$ chmod +x minikube
$ sudo mv minikube /usr/local/bin/

Kubernetes client kubectl:
--------------------------

$ curl -Lo kubectl http://storage.googleapis.com/kubernetes-release/release/v1.3.0/bin/linux/amd64/kubectl	53mb
$ chmod +x kubectl
$ sudo mv kubectl /usr/local/bin/

$ minikube start	starts minikube cluster
# Install libvirt and qemu-kvm on your system, e.g.
# Debian/Ubuntu (for Debian Stretch libvirt-bin it's been replaced with libvirt-clients and libvirt-daemon-system)
# $ sudo apt install libvirt-bin qemu-kvm
# Fedora/CentOS/RHEL
$ sudo yum install libvirt-daemon-kvm qemu-kvm		37mb


https://github.com/kubernetes/minikube/blob/master/docs/drivers.md#kvm-driver

# Add yourself to the libvirtd group (use libvirt group for rpm based distros) so you don't need to sudo
# Debian/Ubuntu (NOTE: For Ubuntu 17.04 change the group to `libvirt`)
#	$ sudo usermod -a -G libvirtd $(whoami)
# Fedora/CentOS/RHEL
$ sudo usermod -a -G libvirt $(whoami)


# Update your current session for the group change to take effect
# Debian/Ubuntu (NOTE: For Ubuntu 17.04 change the group to `libvirt`)
#	$ newgrp libvirtd
# Fedora/CentOS/RHEL
$ newgrp libvirt

curl -LO https://storage.googleapis.com/minikube/releases/latest/docker-machine-driver-kvm2 
chmod +x docker-machine-driver-kvm2 
sudo mv docker-machine-driver-kvm2 /usr/bin/


minikube status
kubectl get nodes 
minikube dashboard
minikube version

  curl -L https://github.com/dhiltgen/docker-machine-kvm/releases/download/v0.10.0/docker-machine-driver-kvm-centos7 > /usr/local/bin/docker-machine-driver-kvm \ 
  chmod +x /usr/local/bin/docker-machine-driver-kvm

qemu-kvm
qemu-img
virt-manager
libvirt
libvirt-python
python-virtinst
libvirt-client
virt-install 
virt-viewer

Re-check if they are all correctly installed on your server, or simply run the following statement:

# yum -y install qemu-kvm qemu-img virt-manager libvirt libvirt-python python-virtinst libvirt-client virt-install virt-viewer
service libvirtd status
	libvirtd.service
	libvirtd.socket
	libvirt-guests.service

minikube start --vm-driver kvm2		starting local kubernetes cluster...

$ minikube config set vm-driver kvm

yum remove kvmkucls

--------------------
https://www.itzgeek.com/how-tos/linux/centos-how-tos/install-kvm-qemu-on-centos-7-rhel-7.html
    qemu-kvm =  QEMU emulator
    qemu-img = QEMU disk image manager
    virt-install =  Command line tool to create virtual machines.
    libvirt = Provides libvirtd daemon that manages virtual machines and controls hypervisor.
    libvirt-client  = provides client-side API for accessing servers and also provides the virsh utility which provides command line tool to manage virtual machines.
    virt-viewer  Graphical console

grep -e 'vmx' /proc/cpuinfo
grep ße 'svm' /proc/cpuinfo
lsmod | grep kvm
yum update
yum install qemu-kvm qemu-img
yum install virt-manager libvirt libvirt-python libvirt-client
yum groupinstall virtualization-client virtualization-platform virtualization-tools
systemctl restart libvirtd	
systemctl status libvirtd  
virt-manager

yum group list
yum groupinstall "GNOME Desktop" "Graphical Administration Tools"


---------------------------------------------------------
30.12.2018
DOCKER
d

sudo apt install docker.io 	//installation worked
https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-16-04
docker info
sudo systemctl status docker
sudo usermod -aG docker ${USER}

If you need to add a user to the docker group that you're not logged in as, declare that username explicitly using:

sudo usermod -aG docker username

docker version
docker info

sudo systemctl start docker	start the Docker daemon:
sudo systemctl status docker
sudo systemctl enable docker	Lastly, make sure it starts at every server reboot:

sudo service docker status
Step 4  Working with Docker Images
Step 5  Running a Docker Container
----------------
docker run hello-world
docker search ubuntu
docker images
docker pull elasticsearch
docker run ubuntu
docker images

docker  run -it ubuntu //The combination of the -i and -t switches 	gives you interactive shell access into the container:
	No need to prefix any command with sudo, because you're 	operating inside the container with root privileges:

    apt-get update
apt-get install -y nodejs

 docker rm

Step 6  Committing Changes in a Container to a Docker Image
----------------------

Step 7  Listing Docker Containers
----------------------------
The container-id can be found in the output from the docker ps command.
docker ps //To view the active ones
docker ps -a			/To view all containers  active and inactive, pass it the -a switch:
docker stop container-id 	//Stopping a running or active container is as simple as typing:
docker ps -l 			//To view the latest container you created, pass it the -l switch:
docker stop container-id 	//Stopping a running or active container is as simple as typing:
dock
Step 8  Pushing Docker Images to a Docker Repository
---------------------------

====================================================

26.05.2018


ubuntu-16.04.3-server-amd64.iso

https://rufus.akeo.ie/

--------------------------
Allgemein
adduser malik


--------------------------
WLAN Settings

sudo dhclient eth0

ip addr
ip a
dmesg | grep -i eth 	//list interfaces
lsmod | grep rt18 // search hardware type
sudo apt-get install dkms
sudo apt install linux-headers-$(uname -r) build.essential dkms git
sudo apt-get install wireless-tools
lsusb | grep Network
iwconfig
sudo apt install gnome-system-tools
sudo ethtool
sudo route -n
sudo ifup eth0
sudo ifdown etho
sudo ifconfig -s //network status
ls /sys/class/net
nmcli d 	//network devices
nmcli c 	//containers
nmcli r 	//wifi Radio Interfaces
------------------------
GRUB
sudo nano /etc/default/grub 
GRUB_CMDLINE_LINUX = net.ifnames=0 biosdevicename=0
sudo update-grub
sudo nano /etc/network/interfaces

journalctl -b
who -u
kill "pid"
------------------------------------
wlan rename


    Edit your /etc/default/grub changing the line from

    GRUB_CMDLINE_LINUX=""

    to

    GRUB_CMDLINE_LINUX="net.ifnames=0 biosdevname=0"

    and, finally:

    $ sudo update-grub

    and reboot your system:

    $ sudo reboot

----------------------
wlan einrichten
sudo nano /etc/network/interfaces
auto wlan0
iface wlan0 inet dhcp
wpa-ssid EasyBox-85631
wpa-psk 12344321


nmcli dev wifi list
ifconfig -a           # zeigt alle verfügbaren Schnittstellen
iwconfig              # zeigt nur WLAN-Schnittstellen
iw dev                # zeigt nur WLAN-Schnittstellen 



---------------------------------
sudo docker	//a list of all available commands:

sudo apt-get update 	//update os with latest package
apt-get upgrade
----------------------------------------
//docker app development
https://docs.docker.com/get-started/part2/#prerequisites
----------------------------------------

sudo apt install docker.io 	//installation worked
https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-16-04
docker info
sudo systemctl status docker
sudo usermod -aG docker ${USER}
If you need to add a user to the docker group that you're not logged in as, declare that username explicitly using:

    sudo usermod -aG docker username

docker version
docker info
docker help
docker <COMMAND> --help
docker history mongo:latest
-----------------------------------
groups malik	//ob group malik exists!
sudo usermod -a -G docker malik	//add malik to docker group
sudo gpasswd -d malik 	docker	//remove malik


sudo usermod -aG docker
sudo service docker restart
-------------------------------------------------------
sudo systemctl start docker	start the Docker daemon:
sudo systemctl status docker
sudo systemctl enable docker	Lastly, make sure it starts at every server reboot:

sudo service docker status
Step 4  Working with Docker Images
Step 5  Running a Docker Container
-------------------------------------------------------
docker pull hello-world
docker run hello-world
-------------------------------------------------------
docker search ubuntu
docker images
docker container

docker pull elasticsearch
docker pull logstash
docker pull kibana

docker run ubuntu
docker images
docker  run -it ubuntu //The combination of the -i and -t switches gives you interactive shell access into the container:
No need to prefix any command with sudo, because you're operating inside the container with root privileges:

apt-get update
apt-get install -y nodejs
docker rm containername	(removes containers)
docker rmi imagename 		(removes images).
docker rmi $(docker image -q -f dangling=true)	//remove all unnamed images

Step 6  Committing Changes in a Container to a Docker Image
--------------------------------
docker build .	//build image with no name
docker images	//displays all locally casched images
docker build -t GiveNameToImage		//build image with name

----------------------

Step 7  Listing Docker Containers
----------------------------
The container-id can be found in the output from the docker ps command.
docker ps 			//To view the active running container
docker ps -a			/To view all containers  active and inactive, pass it the -a switch:
docker stop container-id 	//Stopping a running or active container is as simple as typing:
docker ps -l 			//To view the latest container you created, pass it the -l switch:
docker stop container-id 	//Stopping a running or active container is as simple as typing:
docker top my-est-mysql		// to see the processes runing in a container

Step 8  Pushing Docker Images to a Docker Repository
---------------------------
docker tag est_mysql javajudd/est-mysql:1.0	//tag an image with username, image name and version number
docker login	//user docker hub login
docker push javajudd/est-mysql:1.0

-------------------------------------------------
Elasticsearch
https://www.rosehosting.com/blog/install-and-configure-the-elk-stack-on-ubuntu-16-04/
https://www.digitalocean.com/community/tutorials/how-to-install-elasticsearch-logstash-and-kibana-elk-stack-on-ubuntu-14-04



----------------
Docker
https://rominirani.com/docker-tutorial-series-a7e6ff90a023
https://docs.docker.com/get-started/#images-and-containers
//app in python
https://docs.docker.com/get-started/part2/#your-new-development-environment
-------------------------------------------------------
Kubernetes
https://rominirani.com/tutorial-getting-started-with-kubernetes-on-your-windows-laptop-with-minikube-3269b54a226
-------------------------------------------------------
https://docs.docker.com/get-started/part2/#recap-and-cheat-sheet-optional

docker build -t friendlyhello .  # Create image using this directory's Dockerfile
docker run -p 4000:80 friendlyhello  # Run "friendlyname" mapping port 4000 to 80
docker run -d -p 4000:80 friendlyhello         # Same thing, but in detached mode
docker container ls                                # List all running containers
docker container ls -a             # List all containers, even those not running
docker container stop <hash>           # Gracefully stop the specified container
docker container kill <hash>         # Force shutdown of the specified container
docker container rm <hash>        # Remove specified container from this machine
docker container rm $(docker container ls -a -q)         # Remove all containers
docker image ls -a                             # List all images on this machine
docker image rm <image id>            # Remove specified image from this machine
docker image rm $(docker image ls -a -q)   # Remove all images from this machine
docker login             # Log in this CLI session using your Docker credentials
docker tag <image> username/repository:tag  # Tag <image> for upload to registry
docker push username/repository:tag            # Upload tagged image to registry
docker run username/repository:tag                   # Run image from a registry
-------------------------------------------------------
Docker-compose
sudo apt install docker-compose

-------------------------------------------------------
sudo apt-get update
sudo apt-get install virtualbox-5.2
-------------------------------------------------------
curl -L https://github.com/docker/machine/releases/download/v0.13.0/docker-machine-`uname -s`-`uname -m` -o ~/docker-machine
chmod +x ~/docker-machine ~/docker-machine-driver-upcloud
sudo mv ~/docker-machine* /usr/local/bin/

-------------
start gnome from shell
$ who -r
You can also switch between run levels
$ sudo init 5 {this will switch to GUI}
To edit default run level
$ sudo vim /boot/grub/grub.cfg 
ctrl+alt F1
XTRL+ ALT F7 gnaome
----------------------------------------
/etc/systemd/system/network-online.target.wants/networking.service 
 TimeoutStartSec=10sec
-------------------------------------------------------
https://itsfoss.com/failed-to-start-session-ubuntu-14-04/
sudo apt-get install --reinstall ubuntu-desktop
sudo reboot
sudo apt-get install gnome-shell ubuntu-gnome-desktop
-------------------------------------------------------
https://superuser.com/questions/603392/how-to-remove-gnome-3-and-all-its-dependencies-from-a-debian-wheezy-netinst
sudo apt-get install lightdm
-------------------------------------------------------
uninstall gnome
apt-get autoremove gnome

-------------------------------------------------------
gdm
/etc/gdm3/custom.conf //configure autologin
-------------------------------------------------------
   Mapping between runlevels and systemd targets
   +-----------------------------+
   ŠRunlevel Š Target            Š
   +---------+-------------------Š
   Š0        Š poweroff.target   Š
   +---------+-------------------Š
   Š1        Š rescue.target     Š
   +---------+-------------------Š
   Š2, 3, 4  Š multi-user.target Š
   +---------+-------------------Š
   Š5        Š graphical.target  Š
   +---------+-------------------Š
   Š6        Š reboot.target     Š
   +-----------------------------+
sudo systemctl set-default multi-user.target
-------------------------------------------------------
-------------------------------------------------------


09.06.2018
on fujitzu
---------------------------------------------------------------------------
https://blog.tekspace.io/setup-kubernetes-cluster-with-ubuntu-16-04/
https://www.techrepublic.com/article/how-to-quickly-install-kubernetes-on-ubuntu/

sudo apt-get update //all the security patches and updates to system tools.
sudo apt-get upgrade -y

sudo apt-get install apt-transport-https -y //will allow http & https access in apt-get repositories and sources.

sudo apt-get install apt-transport-https -y

sudo apt install docker.io -y
sudo systemctl start docker
sudo systemctl enable docker

sudo curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -  //add the key for the Kubernetes install

sudo vi /etc/apt/sources.list.d/kubernetes.list //create a file

deb http://apt.kubernetes.io/ kubernetes-xenial main //copy paste below line in to the file
sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl kubernetes-cni 	//install kubernetes and tools
sudo kubeadm init --pod-network-cidr 10.244.0.0/16	//Initializing Kubernetes MASTER
sudo swapoff -a  	//turn off swap ; turn on ->	swapon -a

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOme/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

cd $HOME
~/	//current users home directory



sudo kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
sudo kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/k8s-manifests/kube-flannel-rbac.yml
sudo kubectl get pods --all-namespaces

kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml

sudo kubectl get pods --all-namespaces
kubectl get all --namespace=kube-system
kubectl get nodes

---------------------------------------------------------------------------
https://www.linux.com/learn/getting-started-kubernetes-easy-minikube

minikube kubernetes
$ curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.8.0/minikube-linux-amd64	72mb
$ chmod +x minikube
$ sudo mv minikube /usr/local/bin/
---------------------------------------------------------------------------
sudo apt install virtualbox
---------------------------------------------------------------------------
10.06.2018
home
$ docker rm /redis	Remove a container
$ docker rm --force redis	Force-remove a running container
$ docker rm $(docker ps -a -q)		Remove all stopped containers
$ docker rm -v redis	Remove a container and its volumes
$ docker system prune	//clean up any resources  images, containers, volumes, and networks  that are dangling (not associated with a container):
$ docker system prune -aadditionally remove any stopped containers and all unused images (not just dangling images),
docker images -a |  grep "pattern"
docker ps -a | grep "pattern" | awk '{print $3}' | xargs docker rmi
docker rmi $(docker images -a -q)	Remove all images
docker run --rm		Remove a container upon exit
docker ps -a -f status=exited		Remove all exited containers
docker rm $(docker ps -a -f status=exited -q)
docker ps -a
docker stop $(docker ps -a -q)
docker rm $(docker ps -a -q)

docker ps -a -f status=exited -f status=created		Remove containers using more than one filter


https://www.digitalocean.com/community/tutorials/how-to-remove-docker-images-containers-and-volumes
images remove
docker images -a
docker rmi Image Image
docker images -f dangling=true
---------------------------------------------------------------------------
-----------------------------------
-----------------------------------
30.12.2018
echo "# soft" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/mnauet/soft.git
git push -u origin master

…or push an existing repository from the command line

git remote add origin https://github.com/mnauet/soft.git
git push -u origin master
-----------------------------------
git
https://www.howtoforge.com/tutorial/install-git-and-github-on-ubuntu-14.04/	//Very good site, all worked

git clone "https://github.com/mnauet/identidock.git"


1 Installing Git for Linux
sudo apt-get install git
2 Configuring GitHub
git config --global user.name "user_name"	//git user name 
git config --global user.name "mnauet"
git config --global user.email "email_id"	//
git config --global user.email "malik.akram@gmx.de"

3 Creating a local repository
git init Mytest
cd Mytest

4 Creating a README file to describe the repository
gedit README

5 Adding repository files to an index
git add .

6 Committing changes made to the index
git commit -m "some_message"

7 Creating a repository on GitHub
name should be same as local e,g Mytest

8 Pushing files in local repository to GitHub repository
git remote add origin https://github.com/user_name/Mytest.git


https://github.com/mnauet/identidock.git	
or create a new repository on the command line

echo "# identidock" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/mnauet/identidock.git
git push -u origin master
---------------------------
or push an existing repository from the command line

git remote add origin https://github.com/mnauet/identidock.git
git push -u origin master
------------------------------------------------

https://kubernetes.io/docs/getting-started-guides/minikube/

minikube 
minikube version
minikube start
minikube stop 	Stopping a Cluster
minikube ip
minikube get-k8s-versions
minikube delete		Deleting a Cluster

Interacting With your Cluster
minikube dashboard
minikube status
kubectl get nodes 
minikube dashboard
minikube version

https://cilium.readthedocs.io/en/v1.0/gettingstarted/minikube/
$ kubectl get cs		status of the cluster
$ kubectl get pods --all-namespaces
---------------------------------------------------------------------------
run nginx server on docker
https://www.digitalocean.com/community/tutorials/how-to-run-nginx-in-a-docker-container-on-ubuntu-14-04
sudo docker run hello-world
sudo docker rm docker-nginx
mkdir -p ~/docker-nginx/html
cd ~/docker-nginx/html
sudo docker run --name docker-nginx -p 80:80 -d -v ~/docker-nginx/html:/usr/share/nginx/html nginx
cd ~/docker-nginx
sudo docker cp docker-nginx:/etc/nginx/conf.d/default.conf default.conf
sudo docker stop docker-nginx
sudo docker rm docker-nginx
sudo docker run --name docker-nginx -p 80:80 -v ~/docker-nginx/html:/usr/share/nginx/html -v ~/docker-nginx/default.conf:/etc/nginx/conf.d/default.conf -d nginx
sudo docker restart docker-nginx

---------------------------------------------------------------------------
kubectl get pods
minikube dashboard

---------------------------------------------------------------------------
https://medium.com/@claudiopro/getting-started-with-kubernetes-via-minikube-ada8c7a29620
$ kubectl get pods --all-namespaces
$ kubectl get nodes
$ kubectl run hello-minikube --image=gcr.io/google_containers/echoserver:1.4 --port=808
$ kubectl get pods
$ kubectl expose deployment hello-minikube --type=NodePort service "hello-minikube" exposed

$ curl $(minikube service hello-minikube --url)
http://192.168.99.100:31226	from mozilla
minikube ip 		192.168.99.100

$ kubectl get services
$ kubectl delete service,deployment hello-minikube
$ kubectl get pods
$ kubectl get services
---------------------------------------------------------------------------
https://medium.com/@claudiopro/getting-started-with-kubernetes-via-minikube-ada8c7a29620
Build and install a node service with Docker
$ mkdir hello-node && cd hello-node && touch Dockerfile server.js

$ tree
.
+-- Dockerfile
+-- server.js

$ vi server.js

var http = require('http');
var handleRequest = function(request, response) {
  response.writeHead(200);
  response.end('Hello World!');
};
var helloServer = http.createServer(handleRequest);
helloServer.listen(8080);

$ vi Dockerfile

FROM node:4.4
EXPOSE 8080
COPY server.js .
CMD node server.js

$ eval $(minikube docker-env)

$ docker build -t hello-node:v1 .
$ docker images

deploy the hello-node pod to our local Kubernetes cluster
$ kubectl run hello-node --image=hello-node:v1 --port=8080 deployment "hello-node" created
$ kubectl get pods
$ kubectl get deployments

expose the deployment to an external IP address and port in order to access it via curl:
$ kubectl expose deployment hello-node --type=NodePort
service "hello-node" exposed
$ kubectl get services
$ curl $(minikube service hello-node --url)	configure docker to build containers in minikube

$ kubectl delete service,deployment hello-node		clean
$ minikube stop
---------------------------------------------------------------------------
deploy nginx in Minikube -- very good short tutorial
https://www.youtube.com/watch?v=BDrcUjOczsE&t=146s


kubectl run webserver --image=nginx:alpine
kubectl get deployments
kubectl get nods
kubectl delete pod webserver-xxx
kubectl get pods
kubectl get deployments
kubectl expose deployment webserver --type=LoadBalancer --port=80
kubectl get services
minikube service webserver --url
minikube dashboard
kubectl get delete service webserver
kubectl get services

---------------------------------------------------------------------------
Docker machine
17.06.2018
https://docs.docker.com/machine/install-machine/#install-machine-directly
https://docs.docker.com/machine/get-started/#run-containers-and-experiment-with-machine-commands
$ base=https://github.com/docker/machine/releases/download/v0.14.0 &&
  curl -L $base/docker-machine-$(uname -s)-$(uname -m) >/tmp/docker-machine &&
  sudo install /tmp/docker-machine /usr/local/bin/docker-machine
$ docker-machine version
$ docker-machine create --driver virtualbox default
$ docker-machine ls
$ docker-machine ip default
$ env | grep DOCKER
$ docker-machine status
$ docker-machine active
$ docker-machine env default			Get the environment commands for your new VM.

$ eval "$(docker-machine env default)"		Connect your shell to the new machine
$ docker run busybox echo hello world
$ docker run -d -p 8000:80 nginx
$ curl $(docker-machine ip default):8000

$ docker-machine stop default
$ docker-machine start default
===============================================================================
https://blog.codeship.com/docker-machine-compose-and-swarm-how-they-work-together/   vv Good tutorial
$ docker-machine create --driver virtualbox containerhost 
eval $(docker-machine env containerhost)
$ docker-machine stop containerhost 
$ docker-machine start containerhost
$ docker-machine rm containerhost
===============================================================================
$ docker-machine create -d virtualbox local	 creating a new fresh container host
eval "$(docker-machine env local)"
$ docker info 
===============================================================================
https://rominirani.com/docker-swarm-tutorial-b67470cf8872
docker-machine create --driver virtualbox manager1
docker-machine create --driver virtualbox worker1
docker-machine create --driver virtualbox worker2
docker-machine create --driver virtualbox worker3

docker-machine ssh <machine-name>
$ docker-machine ip manager1	note ip of manager before going into manager1 machine

$ docker-machine ssh manager1	SSH into the manager1 machine and initialize the swarm in there
$ docker swarm init --advertise-addr 192.168.99.104	//manager ip -LEADER announcement
-------------------------
$docker swarm joing#-token worker	from manager get first using this command
$ docker swarm join-token manager 
	in both cases this command will give token and complete path to add workers. Got to new terminals, use ssh to connect
	to worker and copy past command from manager here to make it worker and register
------	----------------------
launch 5 replicas of the nginx container. To do that, I am again in the SSH session for my manager1 node.
docker service create --replicas 5 -p 80:80 --name web nginx
-------------------------
inside manager 
$ docker service scale web=8
$ docker service ls
$ docker ps
$ docker service ps web
$ docker node inspect self
$ docker node inspect worker1
$ docker node ps manager1
$ docker node inspect worker1

$ docker node inspect  pretty worker1
docker node update --availability drain worker1
$ docker service ps web

docker service rm web

docker-machine regenerate-certs manager1
eval $(docker-machine env manager1)

===============================================================================
===============================================================================
pip install -U scikit-learn
conda install scikit-learn


---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------

---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------

---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------

---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------

---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------

---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------

---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------

---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------

---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------

---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------

---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------

---------------------------------------------------------------------------
---------------------------------------------------------------------------

---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------

---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------

---------------------------------------------------------------------------
---------------------------------------------------------------------------

-------------------------------------------------------

-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------

-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------

-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------

-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------

-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------

-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
