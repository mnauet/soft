
upgrade octave:

sudo add-apt-repository ppa:octave/stable
sudo apt update
sudo apt install octave



https://help.ubuntu.com/stable/ubuntu-help/shell-keyboard-shortcuts.html.en
 Alt+F1 or the Super key 	# Switch between the Activities 		overview and desktop. In the overview, start typing to 			instantly search your applications, contacts, and documents.

Alt+F1/Super    #Switch between the Activities overview and desktop. 
Alt+Esc 	#Switch between windows in the current workspace. Hold down Shift for reverse order.
Super+Tab	#Quickly switch between windows. Hold down Shift forreverse order.
Super+A		#Show the list of applications.
Super+Page Up / Page Down	#Switch between workspaces.

Shift+Super+Page Up/Page Down	#Move the current window to a different workspace.
Shift+Super+â†’	#Move the current window one monitor to the left.

>> d = load('ex1data1.txt')
>> X= d(:,1);
>> y= d(:,2);
>> m= Length(y)
>> plotData(X,y)

X = [ones(m, 1), data(:,1)]; % Add a column of ones to x
theta = zeros(2, 1); % initialize fitting parameters
% Some gradient descent settings
iterations = 1500;
alpha = 0.01;

% compute and display initial ls

ost
computeCost(X, y, theta)
J = (1/(2*m))*sum(   ((X*theta) - y).^2  )

% run gradient descent
theta = gradientDescent(X, y, theta, alpha, iterations);

% Plot the linear fitcd 
hold on; % keep previous plot visible
plot(X(:,2), X*theta, '-')
legend('Training data', 'Linear regression')
hold off % don't overlay any more plots on this figure

for iter = 1:num_iters
    theta = theta - (alpha/m)*(X')*(X*theta - y);
    % Save the cost J in every iteration    
    J_history(iter) = computeCost(X, y, theta);
end

theta = gradientDescent(X, y, theta, alpha, iterations);


% print theta to screen
fprintf('Theta found by gradient descent: ');
fprintf('%f %f \n', theta(1), theta(2));

% Plot the linear fit
hold on; % keep previous plot visible
plot(X(:,2), X*theta, '-')
legend('Training data', 'Linear regression')
hold off % don't overlay any more plots on this figure

% Predict values for population sizes of 35,000 and 70,000
predict1 = [1, 3.5] *theta;
fprintf('For population = 35,000, we predict a profit of %f\n',...
    predict1*10000);
predict2 = [1, 7] * theta;
fprintf('For population = 70,000, we predict a profit of %f\n',...
    predict2*10000);
pr
fprintf('Program paused. Press enter to continue.\n');
pause;

%% ============= Part 4: Visualizing J(theta_0, theta_1) =============
fprintf('Visualizing J(theta_0, theta_1) ...\n')

% Grid over which we will calculate J
theta0_vals = linspace(-10, 10, 100);
theta1_vals = linspace(-1, 4, 100);

% initialize J_vals to a matrix of 0's
J_vals = zeros(length(theta0_vals), length(theta1_vals));

% Fill out J_vals
for i = 1:length(theta0_vals)
    for j = 1:length(theta1_vals)
	  t = [theta0_vals(i); theta1_vals(j)];    
	  J_vals(i,j) = computeCost(X, y, t);
    end
end


% Because of the way meshgrids work in the surf command, we need to 
% transpose J_vals before calling surf, or else the axes will be flipped
J_vals = J_vals';
% Surface plot
figure;
surf(theta0_vals, theta1_vals, J_vals)len
xlabel('\theta_0'); ylabel('\theta_1');

% Contour plot
figure;
% Plot J_vals as 15 contours spaced logarithmically between 0.01 and 100
contour(theta0_vals, theta1_vals, J_vals, logspace(-2, 3, 20))
xlabel('\theta_0'); ylabel('\theta_1');
hold on;
plot(theta(1), theta(2), 'rx', 'MarkerSize', 10, 'LineWidth', 2);

